{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/AddTodo.js","Components/TodoData.js","Components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","e","console","log","target","name","completed","textDecoration","this","props","todo","markComplete","removeTodo","id","title","hits","className","type","checked","onChange","bind","style","getTextStyle","onClick","aria-label","aria-hidden","Component","TodoList","todos","map","index","key","AddTodo","state","value","setState","preventDefault","addTodo","onSubmit","handleOnChange","placeholder","aria-describedby","todoData","TodoApp","Object","assign","filter","uuidv4","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6737e2cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TodoItem extends Component {\r\n  handleDelete(e) {\r\n    console.log(e.target.name);\r\n  }\r\n\r\n  getTextStyle(completed) {\r\n    return {\r\n      textDecoration: completed ? \"line-through\" : \"none\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { todo, markComplete, removeTodo } = this.props;\r\n    const { id, title, completed, hits } = todo;\r\n\r\n    return (\r\n      <div className={!completed ? \"alert alert-primary\" : \"alert alert-secondary\"}>\r\n        <input type=\"checkbox\" checked={completed ? \"checked\" : \"\"} onChange={markComplete.bind(this, id, title)} />\r\n        <span style={this.getTextStyle(completed)}>{' '} {title} Hits: {hits} </span>\r\n        <button type=\"button\" className=\"close\" onClick={removeTodo.bind(this, id)} aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    const { todos, markComplete, removeTodo } = this.props\r\n    return (\r\n      <div>\r\n        {/* <h1> TodoList </h1> */}\r\n        {todos.map((todo, index) => (\r\n          <TodoItem key={index} todo={todo} markComplete={markComplete} removeTodo={removeTodo} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class AddTodo extends Component {\r\n  state = { title: \"\" };\r\n\r\n  handleOnChange(e) {\r\n      console.log(e.target.value)\r\n    this.setState({ title: e.target.value});\r\n  }\r\n \r\n/* ES6 Version */\r\n//   handleOnChange = (e) => {\r\n//     console.log(e.target.value)\r\n//   this.setState({ title: e.target.value});\r\n// }\r\n\r\nonSubmit(e) {\r\n    e.preventDefault();\r\n    this.setState({ title: ''});\r\n}\r\n\r\n  render() {\r\n    const { addTodo } = this.props;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.onSubmit.bind(this)}>\r\n          <div className=\"input-group mb-3\">\r\n              <input type=\"text\" className=\"form-control\" value={this.state.title} onChange={this.handleOnChange.bind(this)} placeholder=\"Add Todo Notes\" aria-label=\"Add Todo Notes\" aria-describedby=\"button-addon2\"/>\r\n              <div className=\"input-group-append\">\r\n              <button className=\"btn btn-outline-success\" onClick={addTodo.bind(this, this.state.title)} id=\"button-addon2\">Add Todo</button>\r\n              </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const todoData = [\r\n      {\r\n        // userId: 1,\r\n        id: 1,\r\n        title: \"delectus aut autem\",\r\n        completed: false,\r\n        hits: 0,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"quis ut nam facilis et officia qui\",\r\n        completed: false,\r\n        hits: 0,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"fugiat veniam minus\",\r\n        completed: false,\r\n        hits: 0,\r\n      },\r\n      {\r\n        id: 4,\r\n        title: \"et porro tempora\",\r\n        completed: true,\r\n        hits: 0,\r\n      },\r\n      {\r\n        id: 5,\r\n        title:\r\n          \"laboriosam mollitia et enim quasi\",\r\n        completed: false,\r\n        hits: 0,\r\n      }\r\n    ];","import React, { Component } from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport AddTodo from './AddTodo'\r\nimport { todoData } from \"./TodoData\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nexport default class TodoApp extends Component {\r\n  state = { todos: todoData };\r\n\r\n  markComplete = (id,title) => {\r\n    console.log(id);\r\n    // console.log(title);\r\n    this.setState({todos: this.state.todos.map(todo => {\r\n      if(todo.id === id) {\r\n        // todo.completed = !todo.completed\r\n        // todo.hits = todo.hits + 1\r\n        //// or \r\n        return Object.assign({}, todo, { completed: !todo.completed,hits: todo.hits + 1})\r\n      }\r\n      return todo;\r\n    } )})\r\n  }\r\n\r\n  removeTodo = (id) => {\r\n    console.log(id);\r\n    this.setState({todos: this.state.todos.filter( todo => todo.id !== id)\r\n    });\r\n  }\r\n\r\n  addTodo = (title) => {\r\n    console.log('New Todo tilte', title);\r\n    const todo = {\r\n      id : uuidv4(),\r\n      title,\r\n      completed: false,\r\n      hits: 0\r\n    }\r\n    this.setState({todos: [...this.state.todos, todo]});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"col-md-8 offset-md-2\">\r\n          <br/>\r\n          <h1>TodoApp <span className=\"badge badge-secondary\">New</span></h1>\r\n          <br/>\r\n          <AddTodo addTodo={this.addTodo} />\r\n          <TodoList todos={this.state.todos} markComplete={this.markComplete} removeTodo={this.removeTodo} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport TodoApp from \"./Components/TodoApp\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}